name: Development Testing

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

jobs:
  # First call the Terraform deployment workflow
  terraform:
    permissions:
      id-token: write  # Grant OIDC token permission
      contents: read   # Needed to check out code
    uses: ./.github/workflows/.terraform_deployment.yml
    with:
      environment: 'dev'  # Use dev environment for testing
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  
  # Then run Cypress tests with Terraform output
  e2e-tests:
    needs: terraform
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Download the Terraform outputs from previous job
      - name: Download Terraform output artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-config-dev
          path: .
      
      # Copy Terraform outputs to backend and frontend
      - name: Copy Terraform outputs to app directories
        run: |
          if [ -f "terraform_output.json" ]; then
            cp terraform_output.json backend/terraform.config.json
            cp terraform_output.json frontend/terraform.config.json
            echo "Terraform outputs copied to app directories"
          else
            echo "Warning: terraform_output.json not found, tests may not have correct configuration"
          fi
      
      # Set up Node.js for frontend
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      # Set up Python for backend
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'
      
      # Install backend dependencies
      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      # Install Cypress browser dependencies
      - name: Install browser dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
      
      # Run Cypress headless tests
      - name: Run E2E Tests
        run: |
          cd frontend
          npm run test:e2e:headless
      
      # Upload Cypress screenshots on failure
      - name: Upload screenshots if tests fail
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots
          if-no-files-found: ignore
      
      # Upload Cypress videos
      - name: Upload test videos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: frontend/cypress/videos
          if-no-files-found: ignore