name: Development Testing

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

jobs:
  # Run Jest tests for frontend components in an official Node.js container
  frontend-unit-tests:
    runs-on: ubuntu-latest  # Required: specify the runner that hosts the container
    container:
      image: node:20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      # Run Jest tests
      - name: Run Jest tests
        run: |
          cd frontend
          npm run test:coverage
      
      # Upload test coverage report as an artifact
      - name: Upload test coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jest-coverage
          path: frontend/coverage
          if-no-files-found: ignore
  
  e2e-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
    
      # Set up Node.js for frontend
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      # Set up Python for backend
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'
      
      # Install backend dependencies (modified)
      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          # Make sure the virtual env path exists
          python -c "import sys; print(sys.executable)" > python_path.txt
          cat python_path.txt
      
      # Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      # Install Cypress browser dependencies
      - name: Install browser dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk2.0-0 \
            libgtk-3-0 \
            libgbm-dev \
            libnotify-dev \
            libnss3 \
            libxss1 \
            libasound2-dev \
            libxtst6 \
            xauth \
            xvfb \
            fonts-liberation \
            libappindicator3-1 \
            libatk-bridge2.0-0 \
            libatk1.0-0 \
            libcups2 \
            libdbus-1-3 \
            libnspr4 \
            libu2f-udev \
            libvulkan1
      
      # Run Cypress headless tests
      - name: Run E2E Tests
        run: |
          cd frontend
          npm run test:e2e:headless
      
      # Upload Cypress screenshots on failure
      - name: Upload screenshots if tests fail
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots
          if-no-files-found: ignore
      
      # Upload Cypress videos
      - name: Upload test videos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: frontend/cypress/videos
          if-no-files-found: ignore