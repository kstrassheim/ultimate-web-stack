name: Reusable Terraform Deployment

on:
  workflow_call:
    inputs:
      environment:
        description: 'Deployment environment (dev, test, prod)'
        required: false
        type: string
        default: 'dev'
      terraform_working_dir:
        description: 'Directory with Terraform files'
        required: false
        type: string
        default: '.'
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
    outputs:
      terraform_output_artifact:
        description: "Name of the artifact containing Terraform outputs"
        value: ${{ jobs.terraform.outputs.terraform_output_artifact }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      terraform_output_artifact: ${{ steps.set-output-name.outputs.artifact_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      # Login to Azure using OIDC (no client secret)
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      # Prepare environment for Terraform
      - name: Set environment variables for Terraform
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_env=${{ inputs.environment }}" >> $GITHUB_ENV

      - name: Terraform Init
        working-directory: ${{ inputs.terraform_working_dir }}
        run: |
          terraform init -backend-config="key=${{ inputs.environment }}.tfstate"

      - name: Terraform Apply
        working-directory: ${{ inputs.terraform_working_dir }}
        run: |
          if [ "${{ inputs.environment }}" != "dev" ]; then
            TFVARS_FILE="terraform_vars_${{ inputs.environment }}.tfvars"
            echo "Looking for environment-specific tfvars file: $TFVARS_FILE"
            
            if [ ! -f "$TFVARS_FILE" ]; then
              echo "::error::Missing required file: $TFVARS_FILE"
              exit 1
            fi
            terraform apply -auto-approve -var-file="$TFVARS_FILE"
          else
            echo "Using dev environment defaults."
            terraform apply -auto-approve
          fi

          terraform output -json > terraform_output.json
          echo "Terraform outputs written to terraform_output.json"

      - name: Validate Terraform output
        run: |
          if jq . terraform_output.json > /dev/null 2>&1; then
            echo "Valid JSON from Terraform output."
          else
            echo "::error::Terraform output is not valid JSON!"
            exit 1
          fi

      - name: Set output artifact name
        id: set-output-name
        run: echo "artifact_name=terraform-config-${{ inputs.environment }}" >> $GITHUB_OUTPUT
      
      - name: Upload Terraform output artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-output-name.outputs.artifact_name }}
          path: ${{ inputs.terraform_working_dir }}/terraform_output.json
          retention-days: 7
          if-no-files-found: error

      - name: Logout from Azure
        if: always()
        run: |
          az logout
          rm -rf ~/.azure 2>/dev/null || true