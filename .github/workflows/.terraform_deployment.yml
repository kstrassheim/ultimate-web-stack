name: Reusable Terraform Apply
on:
  workflow_call:
    inputs:
      environment:
        description: 'Deployment environment (dev, test, prod)'
        required: false
        type: string
        default: 'dev'
      python_version:
        description: 'Python version'
        required: false
        type: string
        default: '3.12'
      node_version:
        description: 'Node.js version'
        required: false
        type: string
        default: '18'
      terraform_working_dir:
        description: 'Directory with Terraform files'
        required: false
        type: string
        default: '.'
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
jobs:
  deploy:
    environment:
      # WILL REQUEST APPROVAL ONLY ONCE
      name: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      # === TERRAFORM STEPS ===
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        
      - name: Log in to Azure via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: Set environment variables for Terraform
        run: |
          echo "ARM_FEDERATED_TOKEN_FILE=${{ runner.temp }}/azure_federated_token" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_env=${{ inputs.environment }}" >> $GITHUB_ENV

      - name: Terraform Init
        working-directory: ${{ inputs.terraform_working_dir }}
        run: | 
          # Use the environment input to set the state file name
          terraform init -backend-config="key=${{ inputs.environment }}.tfstate"

      - name: Terraform Apply
        working-directory: ${{ inputs.terraform_working_dir }}
        run: |
          if [ "${{ inputs.environment }}" != "dev" ]; then
            TFVARS_FILE="terraform_vars_${{ inputs.environment }}.tfvars"
            echo "Checking for environment-specific tfvars file: $TFVARS_FILE"
            
            if [ ! -f "$TFVARS_FILE" ]; then
              echo "::error::Missing required file: $TFVARS_FILE"
              echo "Please create a terraform variables file for environment '${{ inputs.environment }}'"
              exit 1
            fi
            
            echo "Using environment-specific tfvars file: $TFVARS_FILE"
            terraform apply -auto-approve -var-file="$TFVARS_FILE"
          else
            echo "Using default variables (dev environment)"
            terraform apply -auto-approve
          fi

          terraform output -json > terraform_output.raw
          sed '1d' terraform_output.raw > terraform_output.f1
          grep -v "^::" terraform_output.f1 > terraform_output.json

          echo "Validating JSON..."
          if jq . terraform_output.json > /dev/null 2>&1; then
            echo -e "\033[32mSUCCESS: Valid JSON confirmed\033[0m"
          else
            echo -e "\033[31mERROR: Invalid JSON generated by terraform output\033[0m"
            cat terraform_output.json
            exit 1
          fi
          
      # Upload terraform output as artifact  
      - name: Upload Terraform output artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-config-${{ inputs.environment }}
          path: ${{ inputs.terraform_working_dir }}/terraform_output.json
          retention-days: 7
          if-no-files-found: error